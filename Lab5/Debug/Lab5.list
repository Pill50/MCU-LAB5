
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080042ac  080042ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ac  080042ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08004324  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004324  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c927  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002186  00000000  00000000  0002c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0002eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0002f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a7  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e920  00000000  00000000  00048c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4c1  00000000  00000000  00057577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  000e4a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800422c 	.word	0x0800422c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800422c 	.word	0x0800422c

0800014c <isCmdEqualToRST>:
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_data_index = 0;
int ADC_value = 0;

// HELPER FUNCTION START
int isCmdEqualToRST(uint8_t str[]){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (str[0] == 'R' && str[1] == 'S' && str[2] == 'T') {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2b52      	cmp	r3, #82	; 0x52
 800015a:	d10b      	bne.n	8000174 <isCmdEqualToRST+0x28>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	3301      	adds	r3, #1
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	2b53      	cmp	r3, #83	; 0x53
 8000164:	d106      	bne.n	8000174 <isCmdEqualToRST+0x28>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	3302      	adds	r3, #2
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b54      	cmp	r3, #84	; 0x54
 800016e:	d101      	bne.n	8000174 <isCmdEqualToRST+0x28>
		return 1;
 8000170:	2301      	movs	r3, #1
 8000172:	e000      	b.n	8000176 <isCmdEqualToRST+0x2a>
	}
	return 0;
 8000174:	2300      	movs	r3, #0
}
 8000176:	4618      	mov	r0, r3
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (str[0] == 'O' && str[1] == 'K')
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b4f      	cmp	r3, #79	; 0x4f
 800018e:	d106      	bne.n	800019e <isCmdEqualToOK+0x1e>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	3301      	adds	r3, #1
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	2b4b      	cmp	r3, #75	; 0x4b
 8000198:	d101      	bne.n	800019e <isCmdEqualToOK+0x1e>
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isCmdEqualToOK+0x20>
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <command_parser_fsm>:
// HELPER FUNCTION END
void command_parser_fsm(ADC_HandleTypeDef* hadc1, UART_HandleTypeDef* huart2) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
	char str[50];
	switch(status) {
 80001b6:	4b3e      	ldr	r3, [pc, #248]	; (80002b0 <command_parser_fsm+0x104>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d03c      	beq.n	8000238 <command_parser_fsm+0x8c>
 80001be:	2b02      	cmp	r3, #2
 80001c0:	dc6d      	bgt.n	800029e <command_parser_fsm+0xf2>
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d002      	beq.n	80001cc <command_parser_fsm+0x20>
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d008      	beq.n	80001dc <command_parser_fsm+0x30>
				cmd_flag = OK;
			}
			status = INIT;
			break;
		default:
			break;
 80001ca:	e068      	b.n	800029e <command_parser_fsm+0xf2>
			if(buffer_byte == '!')
 80001cc:	4b39      	ldr	r3, [pc, #228]	; (80002b4 <command_parser_fsm+0x108>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b21      	cmp	r3, #33	; 0x21
 80001d2:	d166      	bne.n	80002a2 <command_parser_fsm+0xf6>
				status = READING;
 80001d4:	4b36      	ldr	r3, [pc, #216]	; (80002b0 <command_parser_fsm+0x104>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
			break;
 80001da:	e062      	b.n	80002a2 <command_parser_fsm+0xf6>
			if(buffer_byte != '!' && buffer_byte != '#') {
 80001dc:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <command_parser_fsm+0x108>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b21      	cmp	r3, #33	; 0x21
 80001e2:	d01a      	beq.n	800021a <command_parser_fsm+0x6e>
 80001e4:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <command_parser_fsm+0x108>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b23      	cmp	r3, #35	; 0x23
 80001ea:	d016      	beq.n	800021a <command_parser_fsm+0x6e>
				cmd_data[cmd_data_index] = buffer_byte;
 80001ec:	4b32      	ldr	r3, [pc, #200]	; (80002b8 <command_parser_fsm+0x10c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <command_parser_fsm+0x108>)
 80001f4:	7819      	ldrb	r1, [r3, #0]
 80001f6:	4b31      	ldr	r3, [pc, #196]	; (80002bc <command_parser_fsm+0x110>)
 80001f8:	5499      	strb	r1, [r3, r2]
				cmd_data_index++;
 80001fa:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <command_parser_fsm+0x10c>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <command_parser_fsm+0x10c>)
 8000204:	701a      	strb	r2, [r3, #0]
				if(cmd_data_index > 3) {
 8000206:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <command_parser_fsm+0x10c>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b03      	cmp	r3, #3
 800020c:	d905      	bls.n	800021a <command_parser_fsm+0x6e>
					status = STOP;
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <command_parser_fsm+0x104>)
 8000210:	2202      	movs	r2, #2
 8000212:	601a      	str	r2, [r3, #0]
					cmd_data_index = 0;
 8000214:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <command_parser_fsm+0x10c>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
			if (buffer_byte == '#' || buffer_byte == '!') {
 800021a:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <command_parser_fsm+0x108>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b23      	cmp	r3, #35	; 0x23
 8000220:	d003      	beq.n	800022a <command_parser_fsm+0x7e>
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <command_parser_fsm+0x108>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b21      	cmp	r3, #33	; 0x21
 8000228:	d13d      	bne.n	80002a6 <command_parser_fsm+0xfa>
				status = STOP;
 800022a:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <command_parser_fsm+0x104>)
 800022c:	2202      	movs	r2, #2
 800022e:	601a      	str	r2, [r3, #0]
				cmd_data_index = 0;
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <command_parser_fsm+0x10c>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
			break;
 8000236:	e036      	b.n	80002a6 <command_parser_fsm+0xfa>
			if (isCmdEqualToRST(cmd_data)==1){
 8000238:	4820      	ldr	r0, [pc, #128]	; (80002bc <command_parser_fsm+0x110>)
 800023a:	f7ff ff87 	bl	800014c <isCmdEqualToRST>
 800023e:	4603      	mov	r3, r0
 8000240:	2b01      	cmp	r3, #1
 8000242:	d11f      	bne.n	8000284 <command_parser_fsm+0xd8>
				cmd_flag = RST;
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <command_parser_fsm+0x114>)
 8000246:	220a      	movs	r2, #10
 8000248:	701a      	strb	r2, [r3, #0]
				ADC_value = HAL_ADC_GetValue(hadc1);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 febe 	bl	8000fcc <HAL_ADC_GetValue>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <command_parser_fsm+0x118>)
 8000256:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(huart2, (void *)str, sprintf(str, "!ADC=%d#\r\n",ADC_value), 500);
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <command_parser_fsm+0x118>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	f107 030c 	add.w	r3, r7, #12
 8000260:	4919      	ldr	r1, [pc, #100]	; (80002c8 <command_parser_fsm+0x11c>)
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fb68 	bl	8003938 <siprintf>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f107 010c 	add.w	r1, r7, #12
 8000270:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000274:	6838      	ldr	r0, [r7, #0]
 8000276:	f002 fe42 	bl	8002efe <HAL_UART_Transmit>
				setTimer1(3000); // delay 3s to wait for command '!OK'
 800027a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800027e:	f000 fa8f 	bl	80007a0 <setTimer1>
 8000282:	e008      	b.n	8000296 <command_parser_fsm+0xea>
			else if (isCmdEqualToOK(cmd_data)==1){
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <command_parser_fsm+0x110>)
 8000286:	f7ff ff7b 	bl	8000180 <isCmdEqualToOK>
 800028a:	4603      	mov	r3, r0
 800028c:	2b01      	cmp	r3, #1
 800028e:	d102      	bne.n	8000296 <command_parser_fsm+0xea>
				cmd_flag = OK;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <command_parser_fsm+0x114>)
 8000292:	220b      	movs	r2, #11
 8000294:	701a      	strb	r2, [r3, #0]
			status = INIT;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <command_parser_fsm+0x104>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
			break;
 800029c:	e004      	b.n	80002a8 <command_parser_fsm+0xfc>
			break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <command_parser_fsm+0xfc>
			break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <command_parser_fsm+0xfc>
			break;
 80002a6:	bf00      	nop
	}
}
 80002a8:	bf00      	nop
 80002aa:	3740      	adds	r7, #64	; 0x40
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200000b0 	.word	0x200000b0
 80002b4:	2000008c 	.word	0x2000008c
 80002b8:	200000bd 	.word	0x200000bd
 80002bc:	200000b8 	.word	0x200000b8
 80002c0:	200000b4 	.word	0x200000b4
 80002c4:	200000c0 	.word	0x200000c0
 80002c8:	08004244 	.word	0x08004244

080002cc <uart_communication_fsm>:

void uart_communication_fsm(ADC_HandleTypeDef* hadc1, UART_HandleTypeDef* huart2) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	char str[50];
	switch(cmd_flag){
 80002d6:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <uart_communication_fsm+0x84>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b0b      	cmp	r3, #11
 80002dc:	d027      	beq.n	800032e <uart_communication_fsm+0x62>
 80002de:	2b0b      	cmp	r3, #11
 80002e0:	dc2d      	bgt.n	800033e <uart_communication_fsm+0x72>
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d02d      	beq.n	8000342 <uart_communication_fsm+0x76>
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d000      	beq.n	80002ec <uart_communication_fsm+0x20>
		case OK:
			ADC_value = -1;
			cmd_flag = INIT;
			break;
		default:
			break;
 80002ea:	e028      	b.n	800033e <uart_communication_fsm+0x72>
			if(timer1_flag == 1){
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <uart_communication_fsm+0x88>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d128      	bne.n	8000346 <uart_communication_fsm+0x7a>
				ADC_value = HAL_ADC_GetValue(hadc1);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 fe69 	bl	8000fcc <HAL_ADC_GetValue>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <uart_communication_fsm+0x8c>)
 8000300:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(huart2, (void *)str, sprintf(str, "!ADC=%d#\r\n",ADC_value), 500);
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <uart_communication_fsm+0x8c>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	4914      	ldr	r1, [pc, #80]	; (800035c <uart_communication_fsm+0x90>)
 800030c:	4618      	mov	r0, r3
 800030e:	f003 fb13 	bl	8003938 <siprintf>
 8000312:	4603      	mov	r3, r0
 8000314:	b29a      	uxth	r2, r3
 8000316:	f107 010c 	add.w	r1, r7, #12
 800031a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800031e:	6838      	ldr	r0, [r7, #0]
 8000320:	f002 fded 	bl	8002efe <HAL_UART_Transmit>
				setTimer1(1000);
 8000324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000328:	f000 fa3a 	bl	80007a0 <setTimer1>
		    break;
 800032c:	e00b      	b.n	8000346 <uart_communication_fsm+0x7a>
			ADC_value = -1;
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <uart_communication_fsm+0x8c>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295
 8000334:	601a      	str	r2, [r3, #0]
			cmd_flag = INIT;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <uart_communication_fsm+0x84>)
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
			break;
 800033c:	e004      	b.n	8000348 <uart_communication_fsm+0x7c>
			break;
 800033e:	bf00      	nop
 8000340:	e002      	b.n	8000348 <uart_communication_fsm+0x7c>
			break;
 8000342:	bf00      	nop
 8000344:	e000      	b.n	8000348 <uart_communication_fsm+0x7c>
		    break;
 8000346:	bf00      	nop
	}
}
 8000348:	bf00      	nop
 800034a:	3740      	adds	r7, #64	; 0x40
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200000b4 	.word	0x200000b4
 8000354:	200001cc 	.word	0x200001cc
 8000358:	200000c0 	.word	0x200000c0
 800035c:	08004244 	.word	0x08004244

08000360 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <HAL_UART_RxCpltCallback+0x60>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d122      	bne.n	80003b8 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 8000372:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000376:	2201      	movs	r2, #1
 8000378:	4912      	ldr	r1, [pc, #72]	; (80003c4 <HAL_UART_RxCpltCallback+0x64>)
 800037a:	4813      	ldr	r0, [pc, #76]	; (80003c8 <HAL_UART_RxCpltCallback+0x68>)
 800037c:	f002 fdbf 	bl	8002efe <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_UART_RxCpltCallback+0x6c>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_UART_RxCpltCallback+0x64>)
 8000388:	7819      	ldrb	r1, [r3, #0]
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_UART_RxCpltCallback+0x70>)
 800038c:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <HAL_UART_RxCpltCallback+0x6c>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_UART_RxCpltCallback+0x6c>)
 8000398:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <HAL_UART_RxCpltCallback+0x6c>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b1e      	cmp	r3, #30
 80003a0:	d102      	bne.n	80003a8 <HAL_UART_RxCpltCallback+0x48>
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <HAL_UART_RxCpltCallback+0x6c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <HAL_UART_RxCpltCallback+0x74>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	4904      	ldr	r1, [pc, #16]	; (80003c4 <HAL_UART_RxCpltCallback+0x64>)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <HAL_UART_RxCpltCallback+0x68>)
 80003b4:	f002 fe35 	bl	8003022 <HAL_UART_Receive_IT>
	}
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40004400 	.word	0x40004400
 80003c4:	2000008c 	.word	0x2000008c
 80003c8:	20000184 	.word	0x20000184
 80003cc:	200000ae 	.word	0x200000ae
 80003d0:	20000090 	.word	0x20000090
 80003d4:	200000af 	.word	0x200000af

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f000 fc0e 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f83a 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e4:	f000 f99a 	bl	800071c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003e8:	f000 f886 	bl	80004f8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80003ec:	f000 f96c 	bl	80006c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80003f0:	f000 f8f4 	bl	80005dc <MX_TIM3_Init>
  MX_TIM2_Init();
 80003f4:	f000 f8a6 	bl	8000544 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80003f8:	4811      	ldr	r0, [pc, #68]	; (8000440 <main+0x68>)
 80003fa:	f000 fd39 	bl	8000e70 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80003fe:	4811      	ldr	r0, [pc, #68]	; (8000444 <main+0x6c>)
 8000400:	f001 fefe 	bl	8002200 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8000404:	2201      	movs	r2, #1
 8000406:	4910      	ldr	r1, [pc, #64]	; (8000448 <main+0x70>)
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <main+0x74>)
 800040a:	f002 fe0a 	bl	8003022 <HAL_UART_Receive_IT>
  setTimer2(500);
 800040e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000412:	f000 f9e1 	bl	80007d8 <setTimer2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	2120      	movs	r1, #32
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <main+0x78>)
 800041c:	f001 f9b8 	bl	8001790 <HAL_GPIO_WritePin>
  while (1)
  {
	 if(buffer_flag == 1){
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <main+0x7c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d106      	bne.n	8000436 <main+0x5e>
		 command_parser_fsm(&hadc1, &huart2);
 8000428:	4908      	ldr	r1, [pc, #32]	; (800044c <main+0x74>)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <main+0x68>)
 800042c:	f7ff febe 	bl	80001ac <command_parser_fsm>
		 buffer_flag = 0;
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <main+0x7c>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	 }
	 uart_communication_fsm(&hadc1, &huart2);
 8000436:	4905      	ldr	r1, [pc, #20]	; (800044c <main+0x74>)
 8000438:	4801      	ldr	r0, [pc, #4]	; (8000440 <main+0x68>)
 800043a:	f7ff ff47 	bl	80002cc <uart_communication_fsm>
	 if(buffer_flag == 1){
 800043e:	e7ef      	b.n	8000420 <main+0x48>
 8000440:	200000c4 	.word	0x200000c4
 8000444:	200000f4 	.word	0x200000f4
 8000448:	2000008c 	.word	0x2000008c
 800044c:	20000184 	.word	0x20000184
 8000450:	40010800 	.word	0x40010800
 8000454:	200000af 	.word	0x200000af

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b094      	sub	sp, #80	; 0x50
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f003 fa5e 	bl	8003928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	2302      	movs	r3, #2
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000490:	2310      	movs	r3, #16
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f98f 	bl	80017c0 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004a8:	f000 f974 	bl	8000794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fbfc 	bl	8001cc4 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004d2:	f000 f95f 	bl	8000794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004d6:	2302      	movs	r3, #2
 80004d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fd87 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004ec:	f000 f952 	bl	8000794 <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3750      	adds	r7, #80	; 0x50
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_ADC1_Init+0x44>)
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <MX_ADC1_Init+0x48>)
 8000500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_ADC1_Init+0x44>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_ADC1_Init+0x44>)
 800050a:	2201      	movs	r2, #1
 800050c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_ADC1_Init+0x44>)
 8000510:	2200      	movs	r2, #0
 8000512:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_ADC1_Init+0x44>)
 8000516:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <MX_ADC1_Init+0x44>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_ADC1_Init+0x44>)
 8000524:	2201      	movs	r2, #1
 8000526:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_ADC1_Init+0x44>)
 800052a:	f000 fbc9 	bl	8000cc0 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8000534:	f000 f92e 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000c4 	.word	0x200000c4
 8000540:	40012400 	.word	0x40012400

08000544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_TIM2_Init+0x94>)
 800056a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800056e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000578:	2209      	movs	r2, #9
 800057a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_TIM2_Init+0x94>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_TIM2_Init+0x94>)
 800058a:	f001 fde9 	bl	8002160 <HAL_TIM_Base_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000594:	f000 f8fe 	bl	8000794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_TIM2_Init+0x94>)
 80005a6:	f002 f895 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005b0:	f000 f8f0 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_TIM2_Init+0x94>)
 80005c2:	f002 fbe5 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005cc:	f000 f8e2 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f4 	.word	0x200000f4

080005dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_TIM3_Init+0xe4>)
 800060e:	4a2d      	ldr	r2, [pc, #180]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000614:	223f      	movs	r2, #63	; 0x3f
 8000616:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_TIM3_Init+0xe4>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000624:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_TIM3_Init+0xe4>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000634:	f001 fd94 	bl	8002160 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800063e:	f000 f8a9 	bl	8000794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064c:	4619      	mov	r1, r3
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000650:	f002 f840 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800065a:	f000 f89b 	bl	8000794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800065e:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_TIM3_Init+0xe4>)
 8000660:	f001 fe1a 	bl	8002298 <HAL_TIM_PWM_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 f893 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <MX_TIM3_Init+0xe4>)
 800067e:	f002 fb87 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000688:	f000 f884 	bl	8000794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_TIM3_Init+0xe4>)
 80006a4:	f001 ff58 	bl	8002558 <HAL_TIM_PWM_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006ae:	f000 f871 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MX_TIM3_Init+0xe4>)
 80006b4:	f000 f980 	bl	80009b8 <HAL_TIM_MspPostInit>

}
 80006b8:	bf00      	nop
 80006ba:	3738      	adds	r7, #56	; 0x38
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000013c 	.word	0x2000013c
 80006c4:	40000400 	.word	0x40000400

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f002 fbb0 	bl	8002e64 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f843 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000184 	.word	0x20000184
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x5c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2120      	movs	r1, #32
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0x60>)
 800074e:	f001 f81f 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2302      	movs	r3, #2
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x60>)
 800076a:	f000 fe95 	bl	8001498 <HAL_GPIO_Init>

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	timerRun();
 8000788:	f000 f842 	bl	8000810 <timerRun>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <setTimer1>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <setTimer1+0x2c>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	1092      	asrs	r2, r2, #2
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <setTimer1+0x30>)
 80007b8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <setTimer1+0x34>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	66666667 	.word	0x66666667
 80007d0:	200001c8 	.word	0x200001c8
 80007d4:	200001cc 	.word	0x200001cc

080007d8 <setTimer2>:

void setTimer2(int duration){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <setTimer2+0x2c>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1092      	asrs	r2, r2, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <setTimer2+0x30>)
 80007f0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <setTimer2+0x34>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	66666667 	.word	0x66666667
 8000808:	200001d0 	.word	0x200001d0
 800080c:	200001d4 	.word	0x200001d4

08000810 <timerRun>:

void timerRun(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <timerRun+0x4c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dd0b      	ble.n	8000834 <timerRun+0x24>
		timer1_counter--;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <timerRun+0x4c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <timerRun+0x4c>)
 8000824:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <timerRun+0x4c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <timerRun+0x24>
			timer1_flag = 1;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <timerRun+0x50>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <timerRun+0x54>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dd0b      	ble.n	8000854 <timerRun+0x44>
		timer2_counter--;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <timerRun+0x54>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <timerRun+0x54>)
 8000844:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <timerRun+0x54>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <timerRun+0x44>
			timer2_flag = 1;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <timerRun+0x58>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200001c8 	.word	0x200001c8
 8000860:	200001cc 	.word	0x200001cc
 8000864:	200001d0 	.word	0x200001d0
 8000868:	200001d4 	.word	0x200001d4

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_MspInit+0x5c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x5c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_MspInit+0x60>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_MspInit+0x60>)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010000 	.word	0x40010000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <HAL_ADC_MspInit+0x6c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d121      	bne.n	8000934 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_ADC_MspInit+0x70>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <HAL_ADC_MspInit+0x70>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_ADC_MspInit+0x70>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_ADC_MspInit+0x74>)
 8000930:	f000 fdb2 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40012400 	.word	0x40012400
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000958:	d114      	bne.n	8000984 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201c      	movs	r0, #28
 8000978:	f000 fca7 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800097c:	201c      	movs	r0, #28
 800097e:	f000 fcc0 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000982:	e010      	b.n	80009a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_TIM_Base_MspInit+0x6c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10b      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_TIM_Base_MspInit+0x68>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40000400 	.word	0x40000400

080009b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_TIM_MspPostInit+0x58>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d117      	bne.n	8000a08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_TIM_MspPostInit+0x5c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_TIM_MspPostInit+0x5c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_TIM_MspPostInit+0x5c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_TIM_MspPostInit+0x60>)
 8000a04:	f000 fd48 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40000400 	.word	0x40000400
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0x98>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d137      	bne.n	8000aac <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a46:	61d3      	str	r3, [r2, #28]
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_MspInit+0x9c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480f      	ldr	r0, [pc, #60]	; (8000abc <HAL_UART_MspInit+0xa0>)
 8000a80:	f000 fd0a 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a84:	2308      	movs	r3, #8
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_UART_MspInit+0xa0>)
 8000a98:	f000 fcfe 	bl	8001498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2026      	movs	r0, #38	; 0x26
 8000aa2:	f000 fc12 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 fc2b 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f8bf 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM2_IRQHandler+0x10>)
 8000b16:	f001 fc17 	bl	8002348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000f4 	.word	0x200000f4

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USART2_IRQHandler+0x10>)
 8000b2a:	f002 faab 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000184 	.word	0x20000184

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 feb4 	bl	80038d4 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20002800 	.word	0x20002800
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	200001d8 	.word	0x200001d8
 8000ba0:	200001f0 	.word	0x200001f0

08000ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd6:	f7ff ffe5 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fe81 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fbfb 	bl	80003d8 <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bec:	080042b4 	.word	0x080042b4
  ldr r2, =_sbss
 8000bf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf4:	200001f0 	.word	0x200001f0

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fb51 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe28 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fb69 	bl	800131e <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 fb31 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	200001dc 	.word	0x200001dc

08000cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	200001dc 	.word	0x200001dc

08000cc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0be      	b.n	8000e60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fde6 	bl	80008d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f9c7 	bl	8001098 <ADC_ConversionStop_Disable>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8099 	bne.w	8000e4e <HAL_ADC_Init+0x18e>
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8095 	bne.w	8000e4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d2c:	f023 0302 	bic.w	r3, r3, #2
 8000d30:	f043 0202 	orr.w	r2, r3, #2
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7b1b      	ldrb	r3, [r3, #12]
 8000d46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d58:	d003      	beq.n	8000d62 <HAL_ADC_Init+0xa2>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_ADC_Init+0xa8>
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	e000      	b.n	8000d6a <HAL_ADC_Init+0xaa>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7d1b      	ldrb	r3, [r3, #20]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d119      	bne.n	8000dac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7b1b      	ldrb	r3, [r3, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	035a      	lsls	r2, r3, #13
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e00b      	b.n	8000dac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f043 0220 	orr.w	r2, r3, #32
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_ADC_Init+0x1a8>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_Init+0x126>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d104      	bne.n	8000df0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	051b      	lsls	r3, r3, #20
 8000dee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_ADC_Init+0x1ac>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	f023 0303 	bic.w	r3, r3, #3
 8000e22:	f043 0201 	orr.w	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e2a:	e018      	b.n	8000e5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	f023 0312 	bic.w	r3, r3, #18
 8000e34:	f043 0210 	orr.w	r2, r3, #16
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	f043 0201 	orr.w	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4c:	e007      	b.n	8000e5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f043 0210 	orr.w	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	ffe1f7fd 	.word	0xffe1f7fd
 8000e6c:	ff1f0efe 	.word	0xff1f0efe

08000e70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Start+0x1a>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e098      	b.n	8000fbc <HAL_ADC_Start+0x14c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f8a6 	bl	8000fe4 <ADC_Enable>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 8087 	bne.w	8000fb2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <HAL_ADC_Start+0x154>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d105      	bne.n	8000ece <HAL_ADC_Start+0x5e>
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_ADC_Start+0x158>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d115      	bne.n	8000efa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d026      	beq.n	8000f36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ef0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ef8:	e01d      	b.n	8000f36 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <HAL_ADC_Start+0x158>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d004      	beq.n	8000f1a <HAL_ADC_Start+0xaa>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <HAL_ADC_Start+0x154>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10d      	bne.n	8000f36 <HAL_ADC_Start+0xc6>
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_ADC_Start+0x158>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	f023 0206 	bic.w	r2, r3, #6
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4e:	e002      	b.n	8000f56 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f06f 0202 	mvn.w	r2, #2
 8000f66:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f76:	d113      	bne.n	8000fa0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_ADC_Start+0x154>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d105      	bne.n	8000f8e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_ADC_Start+0x158>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d108      	bne.n	8000fa0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	e00c      	b.n	8000fba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	e003      	b.n	8000fba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012800 	.word	0x40012800
 8000fc8:	40012400 	.word	0x40012400

08000fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d040      	beq.n	8001084 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <ADC_Enable+0xac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <ADC_Enable+0xb0>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	0c9b      	lsrs	r3, r3, #18
 800101e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001020:	e002      	b.n	8001028 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3b01      	subs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800102e:	f7ff fe3d 	bl	8000cac <HAL_GetTick>
 8001032:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001034:	e01f      	b.n	8001076 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001036:	f7ff fe39 	bl	8000cac <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d918      	bls.n	8001076 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b01      	cmp	r3, #1
 8001050:	d011      	beq.n	8001076 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f043 0210 	orr.w	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e007      	b.n	8001086 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d1d8      	bne.n	8001036 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d12e      	bne.n	8001110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c2:	f7ff fdf3 	bl	8000cac <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	e01b      	b.n	8001102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ca:	f7ff fdef 	bl	8000cac <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d914      	bls.n	8001102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f043 0210 	orr.w	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d0dc      	beq.n	80010ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	; (80011b4 <__NVIC_EnableIRQ+0x34>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff2d 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff42 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001348:	2b02      	cmp	r3, #2
 800134a:	d008      	beq.n	800135e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2204      	movs	r2, #4
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e020      	b.n	80013a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020e 	bic.w	r2, r2, #14
 800136c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d005      	beq.n	80013ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e051      	b.n	8001472 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 020e 	bic.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_DMA_Abort_IT+0xd0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d029      	beq.n	800144c <HAL_DMA_Abort_IT+0xa0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_DMA_Abort_IT+0xd4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d022      	beq.n	8001448 <HAL_DMA_Abort_IT+0x9c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_DMA_Abort_IT+0xd8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d01a      	beq.n	8001442 <HAL_DMA_Abort_IT+0x96>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_DMA_Abort_IT+0xdc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d012      	beq.n	800143c <HAL_DMA_Abort_IT+0x90>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_DMA_Abort_IT+0xe0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00a      	beq.n	8001436 <HAL_DMA_Abort_IT+0x8a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_DMA_Abort_IT+0xe4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <HAL_DMA_Abort_IT+0x84>
 800142a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800142e:	e00e      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001434:	e00b      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143a:	e008      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	e005      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	e002      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 8001448:	2310      	movs	r3, #16
 800144a:	e000      	b.n	800144e <HAL_DMA_Abort_IT+0xa2>
 800144c:	2301      	movs	r3, #1
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_DMA_Abort_IT+0xe8>)
 8001450:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
    } 
  }
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020008 	.word	0x40020008
 8001480:	4002001c 	.word	0x4002001c
 8001484:	40020030 	.word	0x40020030
 8001488:	40020044 	.word	0x40020044
 800148c:	40020058 	.word	0x40020058
 8001490:	4002006c 	.word	0x4002006c
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e161      	b.n	8001770 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8150 	bne.w	800176a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a97      	ldr	r2, [pc, #604]	; (800172c <HAL_GPIO_Init+0x294>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4a95      	ldr	r2, [pc, #596]	; (800172c <HAL_GPIO_Init+0x294>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4a95      	ldr	r2, [pc, #596]	; (8001730 <HAL_GPIO_Init+0x298>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a93      	ldr	r2, [pc, #588]	; (8001730 <HAL_GPIO_Init+0x298>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a93      	ldr	r2, [pc, #588]	; (8001734 <HAL_GPIO_Init+0x29c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a91      	ldr	r2, [pc, #580]	; (8001734 <HAL_GPIO_Init+0x29c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a91      	ldr	r2, [pc, #580]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a8f      	ldr	r2, [pc, #572]	; (8001738 <HAL_GPIO_Init+0x2a0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a8f      	ldr	r2, [pc, #572]	; (800173c <HAL_GPIO_Init+0x2a4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a8d      	ldr	r2, [pc, #564]	; (800173c <HAL_GPIO_Init+0x2a4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a76      	ldr	r2, [pc, #472]	; (8001740 <HAL_GPIO_Init+0x2a8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80a9 	beq.w	800176a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_GPIO_Init+0x2ac>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <HAL_GPIO_Init+0x2b0>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a3d      	ldr	r2, [pc, #244]	; (800174c <HAL_GPIO_Init+0x2b4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00d      	beq.n	8001678 <HAL_GPIO_Init+0x1e0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3c      	ldr	r2, [pc, #240]	; (8001750 <HAL_GPIO_Init+0x2b8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d007      	beq.n	8001674 <HAL_GPIO_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <HAL_GPIO_Init+0x2bc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_GPIO_Init+0x1d8>
 800166c:	2302      	movs	r3, #2
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001670:	2303      	movs	r3, #3
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001678:	2300      	movs	r3, #0
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800168a:	492f      	ldr	r1, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x2b0>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	492b      	ldr	r1, [pc, #172]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4927      	ldr	r1, [pc, #156]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4921      	ldr	r1, [pc, #132]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	491d      	ldr	r1, [pc, #116]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4917      	ldr	r1, [pc, #92]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4913      	ldr	r1, [pc, #76]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 800170c:	4013      	ands	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01f      	beq.n	800175c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	490d      	ldr	r1, [pc, #52]	; (8001758 <HAL_GPIO_Init+0x2c0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
 8001728:	e01f      	b.n	800176a <HAL_GPIO_Init+0x2d2>
 800172a:	bf00      	nop
 800172c:	10320000 	.word	0x10320000
 8001730:	10310000 	.word	0x10310000
 8001734:	10220000 	.word	0x10220000
 8001738:	10210000 	.word	0x10210000
 800173c:	10120000 	.word	0x10120000
 8001740:	10110000 	.word	0x10110000
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00
 8001754:	40011000 	.word	0x40011000
 8001758:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_GPIO_Init+0x2f4>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	43db      	mvns	r3, r3
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <HAL_GPIO_Init+0x2f4>)
 8001766:	4013      	ands	r3, r2
 8001768:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	f47f ae96 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	372c      	adds	r7, #44	; 0x2c
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e272      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d00c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ec:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d06c      	beq.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d168      	bne.n	80018ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e24c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x76>
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e02e      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0xbc>
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fa06 	bl	8000cac <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fa02 	bl	8000cac <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e200      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xe4>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9f2 	bl	8000cac <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f9ee 	bl	8000cac <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1ec      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x10c>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fa:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1c0      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4939      	ldr	r1, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f9a7 	bl	8000cac <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f9a3 	bl	8000cac <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1a1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f986 	bl	8000cac <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff f982 	bl	8000cac <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e180      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03a      	beq.n	8001a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f966 	bl	8000cac <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f962 	bl	8000cac <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e160      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 fad8 	bl	8001fb8 <RCC_Delay>
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f94c 	bl	8000cac <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a16:	e00f      	b.n	8001a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f948 	bl	8000cac <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d908      	bls.n	8001a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e146      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	42420000 	.word	0x42420000
 8001a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e9      	bne.n	8001a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a6 	beq.w	8001b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a87      	ldr	r2, [pc, #540]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f909 	bl	8000cac <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff f905 	bl	8000cac <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e103      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e02d      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x356>
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a5a      	ldr	r2, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f8b9 	bl	8000cac <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f8b5 	bl	8000cac <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0b1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x37e>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f8a3 	bl	8000cac <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f89f 	bl	8000cac <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e09b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8087 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d061      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d146      	bne.n	8001c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f873 	bl	8000cac <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff f86f 	bl	8000cac <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e06d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4921      	ldr	r1, [pc, #132]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a19      	ldr	r1, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	430b      	orrs	r3, r1
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f843 	bl	8000cac <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff f83f 	bl	8000cac <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46a>
 8001c48:	e035      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f82c 	bl	8000cac <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f828 	bl	8000cac <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e026      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x498>
 8001c76:	e01e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e019      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x500>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0d0      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4965      	ldr	r1, [pc, #404]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d040      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d115      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e073      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06b      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4936      	ldr	r1, [pc, #216]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7fe ff7a 	bl	8000cac <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7fe ff76 	bl	8000cac <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e053      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d210      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4922      	ldr	r1, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f821 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1cc>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fed8 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004260 	.word	0x08004260
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b490      	push	{r4, r7}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ea0:	1d3c      	adds	r4, r7, #4
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea8:	f240 2301 	movw	r3, #513	; 0x201
 8001eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x46>
 8001ed6:	e02b      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	e02b      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3328      	adds	r3, #40	; 0x28
 8001ee8:	443b      	add	r3, r7
 8001eea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	3328      	adds	r3, #40	; 0x28
 8001f06:	443b      	add	r3, r7
 8001f08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	e004      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	623b      	str	r3, [r7, #32]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f32:	623b      	str	r3, [r7, #32]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc90      	pop	{r4, r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	08004250 	.word	0x08004250
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08004270 	.word	0x08004270

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	0adb      	lsrs	r3, r3, #11
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08004270 	.word	0x08004270

08001fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <RCC_Delay+0x34>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <RCC_Delay+0x38>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0a5b      	lsrs	r3, r3, #9
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd4:	bf00      	nop
  }
  while (Delay --);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	60fa      	str	r2, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <RCC_Delay+0x1c>
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	10624dd3 	.word	0x10624dd3

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d07d      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	61d3      	str	r3, [r2, #28]
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002038:	2301      	movs	r3, #1
 800203a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d118      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002048:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a42      	ldr	r2, [pc, #264]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002054:	f7fe fe2a 	bl	8000cac <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fe26 	bl	8000cac <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e06d      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002082:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02e      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d027      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ae:	4a29      	ldr	r2, [pc, #164]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d014      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fdf5 	bl	8000cac <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fdf1 	bl	8000cac <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e036      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4917      	ldr	r1, [pc, #92]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	490b      	ldr	r1, [pc, #44]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4904      	ldr	r1, [pc, #16]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
 800215c:	42420440 	.word	0x42420440

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e041      	b.n	80021f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fbde 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 fb80 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d001      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e035      	b.n	8002284 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIM_Base_Start_IT+0x90>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_TIM_Base_Start_IT+0x4e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002242:	d004      	beq.n	800224e <HAL_TIM_Base_Start_IT+0x4e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_TIM_Base_Start_IT+0x94>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d111      	bne.n	8002272 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b06      	cmp	r3, #6
 800225e:	d010      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002270:	e007      	b.n	8002282 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40000400 	.word	0x40000400

08002298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e041      	b.n	800232e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f839 	bl	8002336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f000 fae4 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa6f 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa62 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa71 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0204 	mvn.w	r2, #4
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa45 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa38 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fa47 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b08      	cmp	r3, #8
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b08      	cmp	r3, #8
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0208 	mvn.w	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa1b 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa0e 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa1d 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b10      	cmp	r3, #16
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0210 	mvn.w	r2, #16
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2208      	movs	r2, #8
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9f1 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9e4 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9f3 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0201 	mvn.w	r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe f95a 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fcad 	bl	8002e52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9b7 	bl	8002892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b20      	cmp	r3, #32
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0220 	mvn.w	r2, #32
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fc78 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e0ac      	b.n	80026cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	f200 809f 	bhi.w	80026c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	080025bd 	.word	0x080025bd
 800258c:	080026c1 	.word	0x080026c1
 8002590:	080026c1 	.word	0x080026c1
 8002594:	080026c1 	.word	0x080026c1
 8002598:	080025fd 	.word	0x080025fd
 800259c:	080026c1 	.word	0x080026c1
 80025a0:	080026c1 	.word	0x080026c1
 80025a4:	080026c1 	.word	0x080026c1
 80025a8:	0800263f 	.word	0x0800263f
 80025ac:	080026c1 	.word	0x080026c1
 80025b0:	080026c1 	.word	0x080026c1
 80025b4:	080026c1 	.word	0x080026c1
 80025b8:	0800267f 	.word	0x0800267f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f9c6 	bl	8002954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6999      	ldr	r1, [r3, #24]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	619a      	str	r2, [r3, #24]
      break;
 80025fa:	e062      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fa0c 	bl	8002a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6999      	ldr	r1, [r3, #24]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	021a      	lsls	r2, r3, #8
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
      break;
 800263c:	e041      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fa55 	bl	8002af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0208 	orr.w	r2, r2, #8
 8002658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69d9      	ldr	r1, [r3, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
      break;
 800267c:	e021      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fa9f 	bl	8002bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	61da      	str	r2, [r3, #28]
      break;
 80026be:	e000      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80026c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_ConfigClockSource+0x18>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0b3      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x180>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800270a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002712:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	d03e      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272a:	f200 8087 	bhi.w	800283c <HAL_TIM_ConfigClockSource+0x168>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	f000 8085 	beq.w	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	d87f      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b70      	cmp	r3, #112	; 0x70
 800273e:	d01a      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xa2>
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d87b      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b60      	cmp	r3, #96	; 0x60
 8002746:	d050      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x116>
 8002748:	2b60      	cmp	r3, #96	; 0x60
 800274a:	d877      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b50      	cmp	r3, #80	; 0x50
 800274e:	d03c      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xf6>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d873      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d058      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x136>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d86f      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b30      	cmp	r3, #48	; 0x30
 800275e:	d064      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d86b      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d060      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d867      	bhi.n	800283c <HAL_TIM_ConfigClockSource+0x168>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05c      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d05a      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002774:	e062      	b.n	800283c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f000 fae4 	bl	8002d52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002798:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	609a      	str	r2, [r3, #8]
      break;
 80027a2:	e04e      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f000 facd 	bl	8002d52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c6:	609a      	str	r2, [r3, #8]
      break;
 80027c8:	e03b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f000 fa44 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2150      	movs	r1, #80	; 0x50
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fa9b 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 80027e8:	e02b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 fa62 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2160      	movs	r1, #96	; 0x60
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fa8b 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002808:	e01b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	f000 fa24 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa7b 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002828:	e00b      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f000 fa72 	bl	8002d1e <TIM_ITRx_SetConfig>
        break;
 800283a:	e002      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002840:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a25      	ldr	r2, [pc, #148]	; (800294c <TIM_Base_SetConfig+0xa8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0x28>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x28>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <TIM_Base_SetConfig+0xac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d108      	bne.n	80028de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1a      	ldr	r2, [pc, #104]	; (800294c <TIM_Base_SetConfig+0xa8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d003      	beq.n	80028f6 <TIM_Base_SetConfig+0x52>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <TIM_Base_SetConfig+0xac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d108      	bne.n	8002908 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <TIM_Base_SetConfig+0xa8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d103      	bne.n	800293c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	615a      	str	r2, [r3, #20]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40000400 	.word	0x40000400

08002954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <TIM_OC1_SetConfig+0xc8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10c      	bne.n	80029ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f023 0308 	bic.w	r3, r3, #8
 80029b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <TIM_OC1_SetConfig+0xc8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d111      	bne.n	80029f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	621a      	str	r2, [r3, #32]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00

08002a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f023 0210 	bic.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0320 	bic.w	r3, r3, #32
 8002a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <TIM_OC2_SetConfig+0xd0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10d      	bne.n	8002a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <TIM_OC2_SetConfig+0xd0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d113      	bne.n	8002acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00

08002af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <TIM_OC3_SetConfig+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10d      	bne.n	8002b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <TIM_OC3_SetConfig+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40012c00 	.word	0x40012c00

08002bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	031b      	lsls	r3, r3, #12
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <TIM_OC4_SetConfig+0x98>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d109      	bne.n	8002c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e041      	b.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d004      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e03f      	b.n	8002ef6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fdc6 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fc85 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08a      	sub	sp, #40	; 0x28
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d17c      	bne.n	8003018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_Transmit+0x2c>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e075      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x3e>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e06e      	b.n	800301a <HAL_UART_Transmit+0x11c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2221      	movs	r2, #33	; 0x21
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fd feab 	bl	8000cac <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f90:	e02a      	b.n	8002fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fa38 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cf      	bne.n	8002f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fa08 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d11d      	bne.n	8003078 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Receive_IT+0x26>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e016      	b.n	800307a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_UART_Receive_IT+0x38>
 8003056:	2302      	movs	r3, #2
 8003058:	e00f      	b.n	800307a <HAL_UART_Receive_IT+0x58>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	461a      	mov	r2, r3
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fa19 	bl	80034a6 <UART_Start_Receive_IT>
 8003074:	4603      	mov	r3, r0
 8003076:	e000      	b.n	800307a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10d      	bne.n	80030d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x52>
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fac9 	bl	8003666 <UART_Receive_IT>
      return;
 80030d4:	e17b      	b.n	80033ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80b1 	beq.w	8003240 <HAL_UART_IRQHandler+0x1bc>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_UART_IRQHandler+0x70>
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a6 	beq.w	8003240 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_UART_IRQHandler+0x90>
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_UART_IRQHandler+0xb0>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0202 	orr.w	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_UART_IRQHandler+0xd0>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00f      	beq.n	800317e <HAL_UART_IRQHandler+0xfa>
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_UART_IRQHandler+0xee>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0208 	orr.w	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 811e 	beq.w	80033c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_UART_IRQHandler+0x11e>
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa62 	bl	8003666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <HAL_UART_IRQHandler+0x146>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d031      	beq.n	800322e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9a4 	bl	8003518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4a76      	ldr	r2, [pc, #472]	; (80033d4 <HAL_UART_IRQHandler+0x350>)
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f8d2 	bl	80013ac <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00e      	b.n	800323c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8e3 	bl	80033ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00a      	b.n	800323c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8df 	bl	80033ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e006      	b.n	800323c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8db 	bl	80033ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800323a:	e0c3      	b.n	80033c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	bf00      	nop
    return;
 800323e:	e0c1      	b.n	80033c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	f040 80a1 	bne.w	800338c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 809b 	beq.w	800338c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8095 	beq.w	800338c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04e      	beq.n	8003324 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003290:	8a3b      	ldrh	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8098 	beq.w	80033c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800329c:	8a3a      	ldrh	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	f080 8092 	bcs.w	80033c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8a3a      	ldrh	r2, [r7, #16]
 80032a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d02b      	beq.n	800330c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f815 	bl	8001336 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003314:	b29b      	uxth	r3, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b29b      	uxth	r3, r3
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f86d 	bl	80033fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003322:	e051      	b.n	80033c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d047      	beq.n	80033cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800333c:	8a7b      	ldrh	r3, [r7, #18]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d044      	beq.n	80033cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003350:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0210 	bic.w	r2, r2, #16
 800337e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003380:	8a7b      	ldrh	r3, [r7, #18]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f839 	bl	80033fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800338a:	e01f      	b.n	80033cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_UART_IRQHandler+0x324>
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8f9 	bl	8003598 <UART_Transmit_IT>
    return;
 80033a6:	e012      	b.n	80033ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <HAL_UART_IRQHandler+0x34a>
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f93a 	bl	8003636 <UART_EndTransmit_IT>
    return;
 80033c2:	e004      	b.n	80033ce <HAL_UART_IRQHandler+0x34a>
    return;
 80033c4:	bf00      	nop
 80033c6:	e002      	b.n	80033ce <HAL_UART_IRQHandler+0x34a>
      return;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_UART_IRQHandler+0x34a>
      return;
 80033cc:	bf00      	nop
  }
}
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08003571 	.word	0x08003571

080033d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	e02c      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d028      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <UART_WaitOnFlagUntilTimeout+0x30>
 8003432:	f7fd fc3b 	bl	8000cac <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	429a      	cmp	r2, r3
 8003440:	d21d      	bcs.n	800347e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003450:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0c3      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	4613      	mov	r3, r2
 80034b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2222      	movs	r2, #34	; 0x22
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800352e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0210 	bic.w	r2, r2, #16
 8003556:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff2d 	bl	80033ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b21      	cmp	r3, #33	; 0x21
 80035aa:	d13e      	bne.n	800362a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	d114      	bne.n	80035e0 <UART_Transmit_IT+0x48>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d110      	bne.n	80035e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]
 80035de:	e008      	b.n	80035f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	1c59      	adds	r1, r3, #1
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6211      	str	r1, [r2, #32]
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff febe 	bl	80033d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b22      	cmp	r3, #34	; 0x22
 8003678:	f040 8099 	bne.w	80037ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d117      	bne.n	80036b6 <UART_Receive_IT+0x50>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e026      	b.n	8003704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d007      	beq.n	80036da <UART_Receive_IT+0x74>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e008      	b.n	80036fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4619      	mov	r1, r3
 8003712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003714:	2b00      	cmp	r3, #0
 8003716:	d148      	bne.n	80037aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0220 	bic.w	r2, r2, #32
 8003726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d123      	bne.n	80037a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d10a      	bne.n	8003792 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fe2f 	bl	80033fc <HAL_UARTEx_RxEventCallback>
 800379e:	e002      	b.n	80037a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fc fddd 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e002      	b.n	80037b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037f2:	f023 030c 	bic.w	r3, r3, #12
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <UART_SetConfig+0x114>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe fbb6 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	e002      	b.n	800382e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fb9e 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800382c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009a      	lsls	r2, r3, #2
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <UART_SetConfig+0x118>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	0119      	lsls	r1, r3, #4
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fbb2 f2f3 	udiv	r2, r2, r3
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <UART_SetConfig+0x118>)
 8003866:	fba3 0302 	umull	r0, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2064      	movs	r0, #100	; 0x64
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <UART_SetConfig+0x118>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	4419      	add	r1, r3
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fbb2 f2f3 	udiv	r2, r2, r3
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <UART_SetConfig+0x118>)
 800389e:	fba3 0302 	umull	r0, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2064      	movs	r0, #100	; 0x64
 80038a6:	fb00 f303 	mul.w	r3, r0, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <UART_SetConfig+0x118>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	440a      	add	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40013800 	.word	0x40013800
 80038d0:	51eb851f 	.word	0x51eb851f

080038d4 <__errno>:
 80038d4:	4b01      	ldr	r3, [pc, #4]	; (80038dc <__errno+0x8>)
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000000c 	.word	0x2000000c

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	2600      	movs	r6, #0
 80038e4:	4d0c      	ldr	r5, [pc, #48]	; (8003918 <__libc_init_array+0x38>)
 80038e6:	4c0d      	ldr	r4, [pc, #52]	; (800391c <__libc_init_array+0x3c>)
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	42a6      	cmp	r6, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	f000 fc9c 	bl	800422c <_init>
 80038f4:	2600      	movs	r6, #0
 80038f6:	4d0a      	ldr	r5, [pc, #40]	; (8003920 <__libc_init_array+0x40>)
 80038f8:	4c0a      	ldr	r4, [pc, #40]	; (8003924 <__libc_init_array+0x44>)
 80038fa:	1b64      	subs	r4, r4, r5
 80038fc:	10a4      	asrs	r4, r4, #2
 80038fe:	42a6      	cmp	r6, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f855 3b04 	ldr.w	r3, [r5], #4
 8003908:	4798      	blx	r3
 800390a:	3601      	adds	r6, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003912:	4798      	blx	r3
 8003914:	3601      	adds	r6, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	080042ac 	.word	0x080042ac
 800391c:	080042ac 	.word	0x080042ac
 8003920:	080042ac 	.word	0x080042ac
 8003924:	080042b0 	.word	0x080042b0

08003928 <memset>:
 8003928:	4603      	mov	r3, r0
 800392a:	4402      	add	r2, r0
 800392c:	4293      	cmp	r3, r2
 800392e:	d100      	bne.n	8003932 <memset+0xa>
 8003930:	4770      	bx	lr
 8003932:	f803 1b01 	strb.w	r1, [r3], #1
 8003936:	e7f9      	b.n	800392c <memset+0x4>

08003938 <siprintf>:
 8003938:	b40e      	push	{r1, r2, r3}
 800393a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800393e:	b500      	push	{lr}
 8003940:	b09c      	sub	sp, #112	; 0x70
 8003942:	ab1d      	add	r3, sp, #116	; 0x74
 8003944:	9002      	str	r0, [sp, #8]
 8003946:	9006      	str	r0, [sp, #24]
 8003948:	9107      	str	r1, [sp, #28]
 800394a:	9104      	str	r1, [sp, #16]
 800394c:	4808      	ldr	r0, [pc, #32]	; (8003970 <siprintf+0x38>)
 800394e:	4909      	ldr	r1, [pc, #36]	; (8003974 <siprintf+0x3c>)
 8003950:	f853 2b04 	ldr.w	r2, [r3], #4
 8003954:	9105      	str	r1, [sp, #20]
 8003956:	6800      	ldr	r0, [r0, #0]
 8003958:	a902      	add	r1, sp, #8
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	f000 f868 	bl	8003a30 <_svfiprintf_r>
 8003960:	2200      	movs	r2, #0
 8003962:	9b02      	ldr	r3, [sp, #8]
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	b01c      	add	sp, #112	; 0x70
 8003968:	f85d eb04 	ldr.w	lr, [sp], #4
 800396c:	b003      	add	sp, #12
 800396e:	4770      	bx	lr
 8003970:	2000000c 	.word	0x2000000c
 8003974:	ffff0208 	.word	0xffff0208

08003978 <__ssputs_r>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	688e      	ldr	r6, [r1, #8]
 800397e:	4682      	mov	sl, r0
 8003980:	429e      	cmp	r6, r3
 8003982:	460c      	mov	r4, r1
 8003984:	4690      	mov	r8, r2
 8003986:	461f      	mov	r7, r3
 8003988:	d838      	bhi.n	80039fc <__ssputs_r+0x84>
 800398a:	898a      	ldrh	r2, [r1, #12]
 800398c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003990:	d032      	beq.n	80039f8 <__ssputs_r+0x80>
 8003992:	6825      	ldr	r5, [r4, #0]
 8003994:	6909      	ldr	r1, [r1, #16]
 8003996:	3301      	adds	r3, #1
 8003998:	eba5 0901 	sub.w	r9, r5, r1
 800399c:	6965      	ldr	r5, [r4, #20]
 800399e:	444b      	add	r3, r9
 80039a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039a8:	106d      	asrs	r5, r5, #1
 80039aa:	429d      	cmp	r5, r3
 80039ac:	bf38      	it	cc
 80039ae:	461d      	movcc	r5, r3
 80039b0:	0553      	lsls	r3, r2, #21
 80039b2:	d531      	bpl.n	8003a18 <__ssputs_r+0xa0>
 80039b4:	4629      	mov	r1, r5
 80039b6:	f000 fb6f 	bl	8004098 <_malloc_r>
 80039ba:	4606      	mov	r6, r0
 80039bc:	b950      	cbnz	r0, 80039d4 <__ssputs_r+0x5c>
 80039be:	230c      	movs	r3, #12
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	f8ca 3000 	str.w	r3, [sl]
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d4:	464a      	mov	r2, r9
 80039d6:	6921      	ldr	r1, [r4, #16]
 80039d8:	f000 face 	bl	8003f78 <memcpy>
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	6126      	str	r6, [r4, #16]
 80039ea:	444e      	add	r6, r9
 80039ec:	6026      	str	r6, [r4, #0]
 80039ee:	463e      	mov	r6, r7
 80039f0:	6165      	str	r5, [r4, #20]
 80039f2:	eba5 0509 	sub.w	r5, r5, r9
 80039f6:	60a5      	str	r5, [r4, #8]
 80039f8:	42be      	cmp	r6, r7
 80039fa:	d900      	bls.n	80039fe <__ssputs_r+0x86>
 80039fc:	463e      	mov	r6, r7
 80039fe:	4632      	mov	r2, r6
 8003a00:	4641      	mov	r1, r8
 8003a02:	6820      	ldr	r0, [r4, #0]
 8003a04:	f000 fac6 	bl	8003f94 <memmove>
 8003a08:	68a3      	ldr	r3, [r4, #8]
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	60a3      	str	r3, [r4, #8]
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	4433      	add	r3, r6
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	e7db      	b.n	80039d0 <__ssputs_r+0x58>
 8003a18:	462a      	mov	r2, r5
 8003a1a:	f000 fbb1 	bl	8004180 <_realloc_r>
 8003a1e:	4606      	mov	r6, r0
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d1e1      	bne.n	80039e8 <__ssputs_r+0x70>
 8003a24:	4650      	mov	r0, sl
 8003a26:	6921      	ldr	r1, [r4, #16]
 8003a28:	f000 face 	bl	8003fc8 <_free_r>
 8003a2c:	e7c7      	b.n	80039be <__ssputs_r+0x46>
	...

08003a30 <_svfiprintf_r>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	4698      	mov	r8, r3
 8003a36:	898b      	ldrh	r3, [r1, #12]
 8003a38:	4607      	mov	r7, r0
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	b09d      	sub	sp, #116	; 0x74
 8003a42:	d50e      	bpl.n	8003a62 <_svfiprintf_r+0x32>
 8003a44:	690b      	ldr	r3, [r1, #16]
 8003a46:	b963      	cbnz	r3, 8003a62 <_svfiprintf_r+0x32>
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	f000 fb25 	bl	8004098 <_malloc_r>
 8003a4e:	6028      	str	r0, [r5, #0]
 8003a50:	6128      	str	r0, [r5, #16]
 8003a52:	b920      	cbnz	r0, 8003a5e <_svfiprintf_r+0x2e>
 8003a54:	230c      	movs	r3, #12
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	e0d1      	b.n	8003c02 <_svfiprintf_r+0x1d2>
 8003a5e:	2340      	movs	r3, #64	; 0x40
 8003a60:	616b      	str	r3, [r5, #20]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9309      	str	r3, [sp, #36]	; 0x24
 8003a66:	2320      	movs	r3, #32
 8003a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a6c:	2330      	movs	r3, #48	; 0x30
 8003a6e:	f04f 0901 	mov.w	r9, #1
 8003a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c1c <_svfiprintf_r+0x1ec>
 8003a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a7e:	4623      	mov	r3, r4
 8003a80:	469a      	mov	sl, r3
 8003a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a86:	b10a      	cbz	r2, 8003a8c <_svfiprintf_r+0x5c>
 8003a88:	2a25      	cmp	r2, #37	; 0x25
 8003a8a:	d1f9      	bne.n	8003a80 <_svfiprintf_r+0x50>
 8003a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a90:	d00b      	beq.n	8003aaa <_svfiprintf_r+0x7a>
 8003a92:	465b      	mov	r3, fp
 8003a94:	4622      	mov	r2, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f7ff ff6d 	bl	8003978 <__ssputs_r>
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f000 80aa 	beq.w	8003bf8 <_svfiprintf_r+0x1c8>
 8003aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aa6:	445a      	add	r2, fp
 8003aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8003aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80a2 	beq.w	8003bf8 <_svfiprintf_r+0x1c8>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003abe:	f10a 0a01 	add.w	sl, sl, #1
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	9307      	str	r3, [sp, #28]
 8003ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aca:	931a      	str	r3, [sp, #104]	; 0x68
 8003acc:	4654      	mov	r4, sl
 8003ace:	2205      	movs	r2, #5
 8003ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad4:	4851      	ldr	r0, [pc, #324]	; (8003c1c <_svfiprintf_r+0x1ec>)
 8003ad6:	f000 fa41 	bl	8003f5c <memchr>
 8003ada:	9a04      	ldr	r2, [sp, #16]
 8003adc:	b9d8      	cbnz	r0, 8003b16 <_svfiprintf_r+0xe6>
 8003ade:	06d0      	lsls	r0, r2, #27
 8003ae0:	bf44      	itt	mi
 8003ae2:	2320      	movmi	r3, #32
 8003ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ae8:	0711      	lsls	r1, r2, #28
 8003aea:	bf44      	itt	mi
 8003aec:	232b      	movmi	r3, #43	; 0x2b
 8003aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af2:	f89a 3000 	ldrb.w	r3, [sl]
 8003af6:	2b2a      	cmp	r3, #42	; 0x2a
 8003af8:	d015      	beq.n	8003b26 <_svfiprintf_r+0xf6>
 8003afa:	4654      	mov	r4, sl
 8003afc:	2000      	movs	r0, #0
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	9a07      	ldr	r2, [sp, #28]
 8003b04:	4621      	mov	r1, r4
 8003b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0a:	3b30      	subs	r3, #48	; 0x30
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	d94e      	bls.n	8003bae <_svfiprintf_r+0x17e>
 8003b10:	b1b0      	cbz	r0, 8003b40 <_svfiprintf_r+0x110>
 8003b12:	9207      	str	r2, [sp, #28]
 8003b14:	e014      	b.n	8003b40 <_svfiprintf_r+0x110>
 8003b16:	eba0 0308 	sub.w	r3, r0, r8
 8003b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	46a2      	mov	sl, r4
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	e7d2      	b.n	8003acc <_svfiprintf_r+0x9c>
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	1d19      	adds	r1, r3, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	9103      	str	r1, [sp, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfbb      	ittet	lt
 8003b32:	425b      	neglt	r3, r3
 8003b34:	f042 0202 	orrlt.w	r2, r2, #2
 8003b38:	9307      	strge	r3, [sp, #28]
 8003b3a:	9307      	strlt	r3, [sp, #28]
 8003b3c:	bfb8      	it	lt
 8003b3e:	9204      	strlt	r2, [sp, #16]
 8003b40:	7823      	ldrb	r3, [r4, #0]
 8003b42:	2b2e      	cmp	r3, #46	; 0x2e
 8003b44:	d10c      	bne.n	8003b60 <_svfiprintf_r+0x130>
 8003b46:	7863      	ldrb	r3, [r4, #1]
 8003b48:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4a:	d135      	bne.n	8003bb8 <_svfiprintf_r+0x188>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	3402      	adds	r4, #2
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9203      	str	r2, [sp, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfb8      	it	lt
 8003b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b5e:	9305      	str	r3, [sp, #20]
 8003b60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c20 <_svfiprintf_r+0x1f0>
 8003b64:	2203      	movs	r2, #3
 8003b66:	4650      	mov	r0, sl
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	f000 f9f7 	bl	8003f5c <memchr>
 8003b6e:	b140      	cbz	r0, 8003b82 <_svfiprintf_r+0x152>
 8003b70:	2340      	movs	r3, #64	; 0x40
 8003b72:	eba0 000a 	sub.w	r0, r0, sl
 8003b76:	fa03 f000 	lsl.w	r0, r3, r0
 8003b7a:	9b04      	ldr	r3, [sp, #16]
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	4303      	orrs	r3, r0
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b86:	2206      	movs	r2, #6
 8003b88:	4826      	ldr	r0, [pc, #152]	; (8003c24 <_svfiprintf_r+0x1f4>)
 8003b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b8e:	f000 f9e5 	bl	8003f5c <memchr>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d038      	beq.n	8003c08 <_svfiprintf_r+0x1d8>
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <_svfiprintf_r+0x1f8>)
 8003b98:	bb1b      	cbnz	r3, 8003be2 <_svfiprintf_r+0x1b2>
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba8:	4433      	add	r3, r6
 8003baa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bac:	e767      	b.n	8003a7e <_svfiprintf_r+0x4e>
 8003bae:	460c      	mov	r4, r1
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bb6:	e7a5      	b.n	8003b04 <_svfiprintf_r+0xd4>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 0c0a 	mov.w	ip, #10
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	3401      	adds	r4, #1
 8003bc2:	9305      	str	r3, [sp, #20]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bca:	3a30      	subs	r2, #48	; 0x30
 8003bcc:	2a09      	cmp	r2, #9
 8003bce:	d903      	bls.n	8003bd8 <_svfiprintf_r+0x1a8>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0c5      	beq.n	8003b60 <_svfiprintf_r+0x130>
 8003bd4:	9105      	str	r1, [sp, #20]
 8003bd6:	e7c3      	b.n	8003b60 <_svfiprintf_r+0x130>
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2301      	movs	r3, #1
 8003bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be0:	e7f0      	b.n	8003bc4 <_svfiprintf_r+0x194>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4638      	mov	r0, r7
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <_svfiprintf_r+0x1fc>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	f3af 8000 	nop.w
 8003bf2:	1c42      	adds	r2, r0, #1
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	d1d6      	bne.n	8003ba6 <_svfiprintf_r+0x176>
 8003bf8:	89ab      	ldrh	r3, [r5, #12]
 8003bfa:	065b      	lsls	r3, r3, #25
 8003bfc:	f53f af2c 	bmi.w	8003a58 <_svfiprintf_r+0x28>
 8003c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c02:	b01d      	add	sp, #116	; 0x74
 8003c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c08:	ab03      	add	r3, sp, #12
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4638      	mov	r0, r7
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <_svfiprintf_r+0x1fc>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	f000 f87c 	bl	8003d10 <_printf_i>
 8003c18:	e7eb      	b.n	8003bf2 <_svfiprintf_r+0x1c2>
 8003c1a:	bf00      	nop
 8003c1c:	08004278 	.word	0x08004278
 8003c20:	0800427e 	.word	0x0800427e
 8003c24:	08004282 	.word	0x08004282
 8003c28:	00000000 	.word	0x00000000
 8003c2c:	08003979 	.word	0x08003979

08003c30 <_printf_common>:
 8003c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c34:	4616      	mov	r6, r2
 8003c36:	4699      	mov	r9, r3
 8003c38:	688a      	ldr	r2, [r1, #8]
 8003c3a:	690b      	ldr	r3, [r1, #16]
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	bfb8      	it	lt
 8003c42:	4613      	movlt	r3, r2
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c50:	b10a      	cbz	r2, 8003c56 <_printf_common+0x26>
 8003c52:	3301      	adds	r3, #1
 8003c54:	6033      	str	r3, [r6, #0]
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	0699      	lsls	r1, r3, #26
 8003c5a:	bf42      	ittt	mi
 8003c5c:	6833      	ldrmi	r3, [r6, #0]
 8003c5e:	3302      	addmi	r3, #2
 8003c60:	6033      	strmi	r3, [r6, #0]
 8003c62:	6825      	ldr	r5, [r4, #0]
 8003c64:	f015 0506 	ands.w	r5, r5, #6
 8003c68:	d106      	bne.n	8003c78 <_printf_common+0x48>
 8003c6a:	f104 0a19 	add.w	sl, r4, #25
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	6832      	ldr	r2, [r6, #0]
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dc28      	bgt.n	8003cca <_printf_common+0x9a>
 8003c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c7c:	1e13      	subs	r3, r2, #0
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	bf18      	it	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	0692      	lsls	r2, r2, #26
 8003c86:	d42d      	bmi.n	8003ce4 <_printf_common+0xb4>
 8003c88:	4649      	mov	r1, r9
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d020      	beq.n	8003cd8 <_printf_common+0xa8>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	68e5      	ldr	r5, [r4, #12]
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf18      	it	ne
 8003ca2:	2500      	movne	r5, #0
 8003ca4:	6832      	ldr	r2, [r6, #0]
 8003ca6:	f04f 0600 	mov.w	r6, #0
 8003caa:	68a3      	ldr	r3, [r4, #8]
 8003cac:	bf08      	it	eq
 8003cae:	1aad      	subeq	r5, r5, r2
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	bf08      	it	eq
 8003cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bfc4      	itt	gt
 8003cbc:	1a9b      	subgt	r3, r3, r2
 8003cbe:	18ed      	addgt	r5, r5, r3
 8003cc0:	341a      	adds	r4, #26
 8003cc2:	42b5      	cmp	r5, r6
 8003cc4:	d11a      	bne.n	8003cfc <_printf_common+0xcc>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e008      	b.n	8003cdc <_printf_common+0xac>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4652      	mov	r2, sl
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	47c0      	blx	r8
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d103      	bne.n	8003ce0 <_printf_common+0xb0>
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	3501      	adds	r5, #1
 8003ce2:	e7c4      	b.n	8003c6e <_printf_common+0x3e>
 8003ce4:	2030      	movs	r0, #48	; 0x30
 8003ce6:	18e1      	adds	r1, r4, r3
 8003ce8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cf2:	4422      	add	r2, r4
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cfa:	e7c5      	b.n	8003c88 <_printf_common+0x58>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4622      	mov	r2, r4
 8003d00:	4649      	mov	r1, r9
 8003d02:	4638      	mov	r0, r7
 8003d04:	47c0      	blx	r8
 8003d06:	3001      	adds	r0, #1
 8003d08:	d0e6      	beq.n	8003cd8 <_printf_common+0xa8>
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7d9      	b.n	8003cc2 <_printf_common+0x92>
	...

08003d10 <_printf_i>:
 8003d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	7e0f      	ldrb	r7, [r1, #24]
 8003d16:	4691      	mov	r9, r2
 8003d18:	2f78      	cmp	r7, #120	; 0x78
 8003d1a:	4680      	mov	r8, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	469a      	mov	sl, r3
 8003d20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d26:	d807      	bhi.n	8003d38 <_printf_i+0x28>
 8003d28:	2f62      	cmp	r7, #98	; 0x62
 8003d2a:	d80a      	bhi.n	8003d42 <_printf_i+0x32>
 8003d2c:	2f00      	cmp	r7, #0
 8003d2e:	f000 80d9 	beq.w	8003ee4 <_printf_i+0x1d4>
 8003d32:	2f58      	cmp	r7, #88	; 0x58
 8003d34:	f000 80a4 	beq.w	8003e80 <_printf_i+0x170>
 8003d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d40:	e03a      	b.n	8003db8 <_printf_i+0xa8>
 8003d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d46:	2b15      	cmp	r3, #21
 8003d48:	d8f6      	bhi.n	8003d38 <_printf_i+0x28>
 8003d4a:	a101      	add	r1, pc, #4	; (adr r1, 8003d50 <_printf_i+0x40>)
 8003d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003d39 	.word	0x08003d39
 8003d5c:	08003d39 	.word	0x08003d39
 8003d60:	08003d39 	.word	0x08003d39
 8003d64:	08003d39 	.word	0x08003d39
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003d39 	.word	0x08003d39
 8003d70:	08003d39 	.word	0x08003d39
 8003d74:	08003d39 	.word	0x08003d39
 8003d78:	08003d39 	.word	0x08003d39
 8003d7c:	08003ecb 	.word	0x08003ecb
 8003d80:	08003ded 	.word	0x08003ded
 8003d84:	08003ead 	.word	0x08003ead
 8003d88:	08003d39 	.word	0x08003d39
 8003d8c:	08003d39 	.word	0x08003d39
 8003d90:	08003eed 	.word	0x08003eed
 8003d94:	08003d39 	.word	0x08003d39
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003d39 	.word	0x08003d39
 8003da0:	08003d39 	.word	0x08003d39
 8003da4:	08003eb5 	.word	0x08003eb5
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	602a      	str	r2, [r5, #0]
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0a4      	b.n	8003f06 <_printf_i+0x1f6>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	0606      	lsls	r6, r0, #24
 8003dc2:	f101 0304 	add.w	r3, r1, #4
 8003dc6:	d50a      	bpl.n	8003dde <_printf_i+0xce>
 8003dc8:	680e      	ldr	r6, [r1, #0]
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	2e00      	cmp	r6, #0
 8003dce:	da03      	bge.n	8003dd8 <_printf_i+0xc8>
 8003dd0:	232d      	movs	r3, #45	; 0x2d
 8003dd2:	4276      	negs	r6, r6
 8003dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd8:	230a      	movs	r3, #10
 8003dda:	485e      	ldr	r0, [pc, #376]	; (8003f54 <_printf_i+0x244>)
 8003ddc:	e019      	b.n	8003e12 <_printf_i+0x102>
 8003dde:	680e      	ldr	r6, [r1, #0]
 8003de0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	bf18      	it	ne
 8003de8:	b236      	sxthne	r6, r6
 8003dea:	e7ef      	b.n	8003dcc <_printf_i+0xbc>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	1d19      	adds	r1, r3, #4
 8003df2:	6029      	str	r1, [r5, #0]
 8003df4:	0601      	lsls	r1, r0, #24
 8003df6:	d501      	bpl.n	8003dfc <_printf_i+0xec>
 8003df8:	681e      	ldr	r6, [r3, #0]
 8003dfa:	e002      	b.n	8003e02 <_printf_i+0xf2>
 8003dfc:	0646      	lsls	r6, r0, #25
 8003dfe:	d5fb      	bpl.n	8003df8 <_printf_i+0xe8>
 8003e00:	881e      	ldrh	r6, [r3, #0]
 8003e02:	2f6f      	cmp	r7, #111	; 0x6f
 8003e04:	bf0c      	ite	eq
 8003e06:	2308      	moveq	r3, #8
 8003e08:	230a      	movne	r3, #10
 8003e0a:	4852      	ldr	r0, [pc, #328]	; (8003f54 <_printf_i+0x244>)
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e12:	6865      	ldr	r5, [r4, #4]
 8003e14:	2d00      	cmp	r5, #0
 8003e16:	bfa8      	it	ge
 8003e18:	6821      	ldrge	r1, [r4, #0]
 8003e1a:	60a5      	str	r5, [r4, #8]
 8003e1c:	bfa4      	itt	ge
 8003e1e:	f021 0104 	bicge.w	r1, r1, #4
 8003e22:	6021      	strge	r1, [r4, #0]
 8003e24:	b90e      	cbnz	r6, 8003e2a <_printf_i+0x11a>
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	d04d      	beq.n	8003ec6 <_printf_i+0x1b6>
 8003e2a:	4615      	mov	r5, r2
 8003e2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e30:	fb03 6711 	mls	r7, r3, r1, r6
 8003e34:	5dc7      	ldrb	r7, [r0, r7]
 8003e36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e3a:	4637      	mov	r7, r6
 8003e3c:	42bb      	cmp	r3, r7
 8003e3e:	460e      	mov	r6, r1
 8003e40:	d9f4      	bls.n	8003e2c <_printf_i+0x11c>
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d10b      	bne.n	8003e5e <_printf_i+0x14e>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	07de      	lsls	r6, r3, #31
 8003e4a:	d508      	bpl.n	8003e5e <_printf_i+0x14e>
 8003e4c:	6923      	ldr	r3, [r4, #16]
 8003e4e:	6861      	ldr	r1, [r4, #4]
 8003e50:	4299      	cmp	r1, r3
 8003e52:	bfde      	ittt	le
 8003e54:	2330      	movle	r3, #48	; 0x30
 8003e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e5e:	1b52      	subs	r2, r2, r5
 8003e60:	6122      	str	r2, [r4, #16]
 8003e62:	464b      	mov	r3, r9
 8003e64:	4621      	mov	r1, r4
 8003e66:	4640      	mov	r0, r8
 8003e68:	f8cd a000 	str.w	sl, [sp]
 8003e6c:	aa03      	add	r2, sp, #12
 8003e6e:	f7ff fedf 	bl	8003c30 <_printf_common>
 8003e72:	3001      	adds	r0, #1
 8003e74:	d14c      	bne.n	8003f10 <_printf_i+0x200>
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	b004      	add	sp, #16
 8003e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e80:	4834      	ldr	r0, [pc, #208]	; (8003f54 <_printf_i+0x244>)
 8003e82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e86:	6829      	ldr	r1, [r5, #0]
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	061d      	lsls	r5, r3, #24
 8003e92:	d514      	bpl.n	8003ebe <_printf_i+0x1ae>
 8003e94:	07df      	lsls	r7, r3, #31
 8003e96:	bf44      	itt	mi
 8003e98:	f043 0320 	orrmi.w	r3, r3, #32
 8003e9c:	6023      	strmi	r3, [r4, #0]
 8003e9e:	b91e      	cbnz	r6, 8003ea8 <_printf_i+0x198>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	e7af      	b.n	8003e0c <_printf_i+0xfc>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	2378      	movs	r3, #120	; 0x78
 8003eb6:	4828      	ldr	r0, [pc, #160]	; (8003f58 <_printf_i+0x248>)
 8003eb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ebc:	e7e3      	b.n	8003e86 <_printf_i+0x176>
 8003ebe:	0659      	lsls	r1, r3, #25
 8003ec0:	bf48      	it	mi
 8003ec2:	b2b6      	uxthmi	r6, r6
 8003ec4:	e7e6      	b.n	8003e94 <_printf_i+0x184>
 8003ec6:	4615      	mov	r5, r2
 8003ec8:	e7bb      	b.n	8003e42 <_printf_i+0x132>
 8003eca:	682b      	ldr	r3, [r5, #0]
 8003ecc:	6826      	ldr	r6, [r4, #0]
 8003ece:	1d18      	adds	r0, r3, #4
 8003ed0:	6961      	ldr	r1, [r4, #20]
 8003ed2:	6028      	str	r0, [r5, #0]
 8003ed4:	0635      	lsls	r5, r6, #24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	d501      	bpl.n	8003ede <_printf_i+0x1ce>
 8003eda:	6019      	str	r1, [r3, #0]
 8003edc:	e002      	b.n	8003ee4 <_printf_i+0x1d4>
 8003ede:	0670      	lsls	r0, r6, #25
 8003ee0:	d5fb      	bpl.n	8003eda <_printf_i+0x1ca>
 8003ee2:	8019      	strh	r1, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4615      	mov	r5, r2
 8003ee8:	6123      	str	r3, [r4, #16]
 8003eea:	e7ba      	b.n	8003e62 <_printf_i+0x152>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	2100      	movs	r1, #0
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	602a      	str	r2, [r5, #0]
 8003ef4:	681d      	ldr	r5, [r3, #0]
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f000 f82f 	bl	8003f5c <memchr>
 8003efe:	b108      	cbz	r0, 8003f04 <_printf_i+0x1f4>
 8003f00:	1b40      	subs	r0, r0, r5
 8003f02:	6060      	str	r0, [r4, #4]
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f0e:	e7a8      	b.n	8003e62 <_printf_i+0x152>
 8003f10:	462a      	mov	r2, r5
 8003f12:	4649      	mov	r1, r9
 8003f14:	4640      	mov	r0, r8
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	47d0      	blx	sl
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d0ab      	beq.n	8003e76 <_printf_i+0x166>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	079b      	lsls	r3, r3, #30
 8003f22:	d413      	bmi.n	8003f4c <_printf_i+0x23c>
 8003f24:	68e0      	ldr	r0, [r4, #12]
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	4298      	cmp	r0, r3
 8003f2a:	bfb8      	it	lt
 8003f2c:	4618      	movlt	r0, r3
 8003f2e:	e7a4      	b.n	8003e7a <_printf_i+0x16a>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4632      	mov	r2, r6
 8003f34:	4649      	mov	r1, r9
 8003f36:	4640      	mov	r0, r8
 8003f38:	47d0      	blx	sl
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d09b      	beq.n	8003e76 <_printf_i+0x166>
 8003f3e:	3501      	adds	r5, #1
 8003f40:	68e3      	ldr	r3, [r4, #12]
 8003f42:	9903      	ldr	r1, [sp, #12]
 8003f44:	1a5b      	subs	r3, r3, r1
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	dcf2      	bgt.n	8003f30 <_printf_i+0x220>
 8003f4a:	e7eb      	b.n	8003f24 <_printf_i+0x214>
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	f104 0619 	add.w	r6, r4, #25
 8003f52:	e7f5      	b.n	8003f40 <_printf_i+0x230>
 8003f54:	08004289 	.word	0x08004289
 8003f58:	0800429a 	.word	0x0800429a

08003f5c <memchr>:
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	b2c9      	uxtb	r1, r1
 8003f62:	4402      	add	r2, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	d101      	bne.n	8003f6e <memchr+0x12>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e003      	b.n	8003f76 <memchr+0x1a>
 8003f6e:	7804      	ldrb	r4, [r0, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	428c      	cmp	r4, r1
 8003f74:	d1f6      	bne.n	8003f64 <memchr+0x8>
 8003f76:	bd10      	pop	{r4, pc}

08003f78 <memcpy>:
 8003f78:	440a      	add	r2, r1
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f80:	d100      	bne.n	8003f84 <memcpy+0xc>
 8003f82:	4770      	bx	lr
 8003f84:	b510      	push	{r4, lr}
 8003f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f90:	d1f9      	bne.n	8003f86 <memcpy+0xe>
 8003f92:	bd10      	pop	{r4, pc}

08003f94 <memmove>:
 8003f94:	4288      	cmp	r0, r1
 8003f96:	b510      	push	{r4, lr}
 8003f98:	eb01 0402 	add.w	r4, r1, r2
 8003f9c:	d902      	bls.n	8003fa4 <memmove+0x10>
 8003f9e:	4284      	cmp	r4, r0
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	d807      	bhi.n	8003fb4 <memmove+0x20>
 8003fa4:	1e43      	subs	r3, r0, #1
 8003fa6:	42a1      	cmp	r1, r4
 8003fa8:	d008      	beq.n	8003fbc <memmove+0x28>
 8003faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fb2:	e7f8      	b.n	8003fa6 <memmove+0x12>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4402      	add	r2, r0
 8003fb8:	428a      	cmp	r2, r1
 8003fba:	d100      	bne.n	8003fbe <memmove+0x2a>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fc6:	e7f7      	b.n	8003fb8 <memmove+0x24>

08003fc8 <_free_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4605      	mov	r5, r0
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d040      	beq.n	8004052 <_free_r+0x8a>
 8003fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd4:	1f0c      	subs	r4, r1, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bfb8      	it	lt
 8003fda:	18e4      	addlt	r4, r4, r3
 8003fdc:	f000 f910 	bl	8004200 <__malloc_lock>
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <_free_r+0x8c>)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	b933      	cbnz	r3, 8003ff4 <_free_r+0x2c>
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6014      	str	r4, [r2, #0]
 8003fea:	4628      	mov	r0, r5
 8003fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff0:	f000 b90c 	b.w	800420c <__malloc_unlock>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d908      	bls.n	800400a <_free_r+0x42>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	1821      	adds	r1, r4, r0
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	bf01      	itttt	eq
 8004000:	6819      	ldreq	r1, [r3, #0]
 8004002:	685b      	ldreq	r3, [r3, #4]
 8004004:	1809      	addeq	r1, r1, r0
 8004006:	6021      	streq	r1, [r4, #0]
 8004008:	e7ed      	b.n	8003fe6 <_free_r+0x1e>
 800400a:	461a      	mov	r2, r3
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	b10b      	cbz	r3, 8004014 <_free_r+0x4c>
 8004010:	42a3      	cmp	r3, r4
 8004012:	d9fa      	bls.n	800400a <_free_r+0x42>
 8004014:	6811      	ldr	r1, [r2, #0]
 8004016:	1850      	adds	r0, r2, r1
 8004018:	42a0      	cmp	r0, r4
 800401a:	d10b      	bne.n	8004034 <_free_r+0x6c>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	4401      	add	r1, r0
 8004020:	1850      	adds	r0, r2, r1
 8004022:	4283      	cmp	r3, r0
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	d1e0      	bne.n	8003fea <_free_r+0x22>
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4401      	add	r1, r0
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	6053      	str	r3, [r2, #4]
 8004032:	e7da      	b.n	8003fea <_free_r+0x22>
 8004034:	d902      	bls.n	800403c <_free_r+0x74>
 8004036:	230c      	movs	r3, #12
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	e7d6      	b.n	8003fea <_free_r+0x22>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	bf01      	itttt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	6063      	str	r3, [r4, #4]
 800404e:	6054      	str	r4, [r2, #4]
 8004050:	e7cb      	b.n	8003fea <_free_r+0x22>
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200001e0 	.word	0x200001e0

08004058 <sbrk_aligned>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4e0e      	ldr	r6, [pc, #56]	; (8004094 <sbrk_aligned+0x3c>)
 800405c:	460c      	mov	r4, r1
 800405e:	6831      	ldr	r1, [r6, #0]
 8004060:	4605      	mov	r5, r0
 8004062:	b911      	cbnz	r1, 800406a <sbrk_aligned+0x12>
 8004064:	f000 f8bc 	bl	80041e0 <_sbrk_r>
 8004068:	6030      	str	r0, [r6, #0]
 800406a:	4621      	mov	r1, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f8b7 	bl	80041e0 <_sbrk_r>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	d00a      	beq.n	800408c <sbrk_aligned+0x34>
 8004076:	1cc4      	adds	r4, r0, #3
 8004078:	f024 0403 	bic.w	r4, r4, #3
 800407c:	42a0      	cmp	r0, r4
 800407e:	d007      	beq.n	8004090 <sbrk_aligned+0x38>
 8004080:	1a21      	subs	r1, r4, r0
 8004082:	4628      	mov	r0, r5
 8004084:	f000 f8ac 	bl	80041e0 <_sbrk_r>
 8004088:	3001      	adds	r0, #1
 800408a:	d101      	bne.n	8004090 <sbrk_aligned+0x38>
 800408c:	f04f 34ff 	mov.w	r4, #4294967295
 8004090:	4620      	mov	r0, r4
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	200001e4 	.word	0x200001e4

08004098 <_malloc_r>:
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	1ccd      	adds	r5, r1, #3
 800409e:	f025 0503 	bic.w	r5, r5, #3
 80040a2:	3508      	adds	r5, #8
 80040a4:	2d0c      	cmp	r5, #12
 80040a6:	bf38      	it	cc
 80040a8:	250c      	movcc	r5, #12
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	4607      	mov	r7, r0
 80040ae:	db01      	blt.n	80040b4 <_malloc_r+0x1c>
 80040b0:	42a9      	cmp	r1, r5
 80040b2:	d905      	bls.n	80040c0 <_malloc_r+0x28>
 80040b4:	230c      	movs	r3, #12
 80040b6:	2600      	movs	r6, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4630      	mov	r0, r6
 80040bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c0:	4e2e      	ldr	r6, [pc, #184]	; (800417c <_malloc_r+0xe4>)
 80040c2:	f000 f89d 	bl	8004200 <__malloc_lock>
 80040c6:	6833      	ldr	r3, [r6, #0]
 80040c8:	461c      	mov	r4, r3
 80040ca:	bb34      	cbnz	r4, 800411a <_malloc_r+0x82>
 80040cc:	4629      	mov	r1, r5
 80040ce:	4638      	mov	r0, r7
 80040d0:	f7ff ffc2 	bl	8004058 <sbrk_aligned>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	4604      	mov	r4, r0
 80040d8:	d14d      	bne.n	8004176 <_malloc_r+0xde>
 80040da:	6834      	ldr	r4, [r6, #0]
 80040dc:	4626      	mov	r6, r4
 80040de:	2e00      	cmp	r6, #0
 80040e0:	d140      	bne.n	8004164 <_malloc_r+0xcc>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	4631      	mov	r1, r6
 80040e6:	4638      	mov	r0, r7
 80040e8:	eb04 0803 	add.w	r8, r4, r3
 80040ec:	f000 f878 	bl	80041e0 <_sbrk_r>
 80040f0:	4580      	cmp	r8, r0
 80040f2:	d13a      	bne.n	800416a <_malloc_r+0xd2>
 80040f4:	6821      	ldr	r1, [r4, #0]
 80040f6:	3503      	adds	r5, #3
 80040f8:	1a6d      	subs	r5, r5, r1
 80040fa:	f025 0503 	bic.w	r5, r5, #3
 80040fe:	3508      	adds	r5, #8
 8004100:	2d0c      	cmp	r5, #12
 8004102:	bf38      	it	cc
 8004104:	250c      	movcc	r5, #12
 8004106:	4638      	mov	r0, r7
 8004108:	4629      	mov	r1, r5
 800410a:	f7ff ffa5 	bl	8004058 <sbrk_aligned>
 800410e:	3001      	adds	r0, #1
 8004110:	d02b      	beq.n	800416a <_malloc_r+0xd2>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	442b      	add	r3, r5
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	e00e      	b.n	8004138 <_malloc_r+0xa0>
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	1b52      	subs	r2, r2, r5
 800411e:	d41e      	bmi.n	800415e <_malloc_r+0xc6>
 8004120:	2a0b      	cmp	r2, #11
 8004122:	d916      	bls.n	8004152 <_malloc_r+0xba>
 8004124:	1961      	adds	r1, r4, r5
 8004126:	42a3      	cmp	r3, r4
 8004128:	6025      	str	r5, [r4, #0]
 800412a:	bf18      	it	ne
 800412c:	6059      	strne	r1, [r3, #4]
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	bf08      	it	eq
 8004132:	6031      	streq	r1, [r6, #0]
 8004134:	5162      	str	r2, [r4, r5]
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	4638      	mov	r0, r7
 800413a:	f104 060b 	add.w	r6, r4, #11
 800413e:	f000 f865 	bl	800420c <__malloc_unlock>
 8004142:	f026 0607 	bic.w	r6, r6, #7
 8004146:	1d23      	adds	r3, r4, #4
 8004148:	1af2      	subs	r2, r6, r3
 800414a:	d0b6      	beq.n	80040ba <_malloc_r+0x22>
 800414c:	1b9b      	subs	r3, r3, r6
 800414e:	50a3      	str	r3, [r4, r2]
 8004150:	e7b3      	b.n	80040ba <_malloc_r+0x22>
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	42a3      	cmp	r3, r4
 8004156:	bf0c      	ite	eq
 8004158:	6032      	streq	r2, [r6, #0]
 800415a:	605a      	strne	r2, [r3, #4]
 800415c:	e7ec      	b.n	8004138 <_malloc_r+0xa0>
 800415e:	4623      	mov	r3, r4
 8004160:	6864      	ldr	r4, [r4, #4]
 8004162:	e7b2      	b.n	80040ca <_malloc_r+0x32>
 8004164:	4634      	mov	r4, r6
 8004166:	6876      	ldr	r6, [r6, #4]
 8004168:	e7b9      	b.n	80040de <_malloc_r+0x46>
 800416a:	230c      	movs	r3, #12
 800416c:	4638      	mov	r0, r7
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	f000 f84c 	bl	800420c <__malloc_unlock>
 8004174:	e7a1      	b.n	80040ba <_malloc_r+0x22>
 8004176:	6025      	str	r5, [r4, #0]
 8004178:	e7de      	b.n	8004138 <_malloc_r+0xa0>
 800417a:	bf00      	nop
 800417c:	200001e0 	.word	0x200001e0

08004180 <_realloc_r>:
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	4680      	mov	r8, r0
 8004186:	4614      	mov	r4, r2
 8004188:	460e      	mov	r6, r1
 800418a:	b921      	cbnz	r1, 8004196 <_realloc_r+0x16>
 800418c:	4611      	mov	r1, r2
 800418e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	f7ff bf81 	b.w	8004098 <_malloc_r>
 8004196:	b92a      	cbnz	r2, 80041a4 <_realloc_r+0x24>
 8004198:	f7ff ff16 	bl	8003fc8 <_free_r>
 800419c:	4625      	mov	r5, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a4:	f000 f838 	bl	8004218 <_malloc_usable_size_r>
 80041a8:	4284      	cmp	r4, r0
 80041aa:	4607      	mov	r7, r0
 80041ac:	d802      	bhi.n	80041b4 <_realloc_r+0x34>
 80041ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041b2:	d812      	bhi.n	80041da <_realloc_r+0x5a>
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f7ff ff6e 	bl	8004098 <_malloc_r>
 80041bc:	4605      	mov	r5, r0
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0ed      	beq.n	800419e <_realloc_r+0x1e>
 80041c2:	42bc      	cmp	r4, r7
 80041c4:	4622      	mov	r2, r4
 80041c6:	4631      	mov	r1, r6
 80041c8:	bf28      	it	cs
 80041ca:	463a      	movcs	r2, r7
 80041cc:	f7ff fed4 	bl	8003f78 <memcpy>
 80041d0:	4631      	mov	r1, r6
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7ff fef8 	bl	8003fc8 <_free_r>
 80041d8:	e7e1      	b.n	800419e <_realloc_r+0x1e>
 80041da:	4635      	mov	r5, r6
 80041dc:	e7df      	b.n	800419e <_realloc_r+0x1e>
	...

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	2300      	movs	r3, #0
 80041e4:	4d05      	ldr	r5, [pc, #20]	; (80041fc <_sbrk_r+0x1c>)
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	f7fc fca4 	bl	8000b38 <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	200001e8 	.word	0x200001e8

08004200 <__malloc_lock>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__malloc_lock+0x8>)
 8004202:	f000 b811 	b.w	8004228 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	200001ec 	.word	0x200001ec

0800420c <__malloc_unlock>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__malloc_unlock+0x8>)
 800420e:	f000 b80c 	b.w	800422a <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	200001ec 	.word	0x200001ec

08004218 <_malloc_usable_size_r>:
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f18      	subs	r0, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfbc      	itt	lt
 8004222:	580b      	ldrlt	r3, [r1, r0]
 8004224:	18c0      	addlt	r0, r0, r3
 8004226:	4770      	bx	lr

08004228 <__retarget_lock_acquire_recursive>:
 8004228:	4770      	bx	lr

0800422a <__retarget_lock_release_recursive>:
 800422a:	4770      	bx	lr

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
